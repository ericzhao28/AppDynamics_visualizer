const async = require('async');
const Survey = require('../models/survey');
const User = require('../models/User');


/**
 * GET /survey/create
 * Display survey creation page
 */
exports.getAccount = (req, res) => {
  if (!req.user) {
    return res.redirect('/');
  }
  res.render('survey/create', {
    title: 'Survey creation'
  });
};

/**
 * POST /survey/create
 * Create a new survey, ajax API call
 */
exports.postCreateSurvey = (req, res, next) => {
  if (!req.user) {
    return JSON.stringify({'valid':'false', 'msg':'You have been signed out, please sign in again (in a different tab if you want to save your current progress).'});
  }
  const errors = req.validationErrors();
  if (errors) {
    return JSON.stringify({'valid':'false', 'msg':errors});
  }
  var surveyInfo;
  try {
    surveyInfo = JSON.parse(req.body.surveyInfo);
  }
  catch (err) {
    return JSON.stringify({'valid':'false', 'msg':err.message});
  }
// Add survey info
  const newSurvey = new Survey({
    surveyID: surveyInfo.surveyID || '',
    shortTitle: surveyInfo.shortTitle || '',
    question: surveyInfo.question || '',
    created_by: req.user.id,
    options: surveyInfo.options
  });
// Verify custom surveyID is open, and then save survey + return JSON resp. 
  Survey.findOne({surveyID: surveyInfo.surveyID}, (err, existingSurvey) => {
    if (existingSurvey) {
      return JSON.stringify({'valid':'false', 'msg':'Survey with custom ID already exists. Please choose a different one or leave it blank to get an autogenerated one.'});
    }
    newSurvey.save((err) => {
      if (err.code === 11000) {
        return JSON.stringify({'valid':'false', 'msg':'Duplicate options'}); 
      }
      if (err) { return next(err); }
      var surveyReferenceURL = (newSurvey.surveyID == '') ? newSurvey._id : newSurvey.surveyID;
      return JSON.stringify({'valid':'true', 'msg':surveyReferenceURL}); 
    });
  });
};

/**
 * GET /survey/update/:surveyID
 * Survey update page
 */
exports.getSurveyUpdatePage = (req, res) => {
  if (!req.user) {
    return res.redirect('/');
  }
// Build update page based on Survey ID
  Survey.findById(req.params.surveyID, (err, survey) => {
    if (err) { return next(err); }
    if (!survey) { 
      req.flash('errors', { msg: 'Invalid survey ID' });
      return res.redirect('/');
    }
// Verify user before render
    survey.verifyAuthor(req.user.id, function(err, isAuthor){
      if (err) { return next(err); }
      if (isAuthor) { 
        res.render('survey/update', {
          title: 'Update Survey'
        });
      }
    });
  });
};

/**
 * POST /survey/update
 * Update survey info.
 */
exports.postUpdateSurvey = (req, res, next) => {
  if (!req.user) {
    return res.redirect('/');
  }
  const errors = req.validationErrors();
  if (errors) {
    req.flash('errors', errors);
    return res.redirect('/');
  }
  var updatedSurvey;
  // Parse JSON data  
  try {
    updatedSurvey = JSON.parse(req.body.updatedSurvey);
  }
  catch (err) {
    return JSON.stringify({'valid':'false', 'msg':err.message});
  }
  // Identify survey, replace temp instance's chars
  Survey.findById(updatedSurvey.survey_id, (err, survey) => {
    if (err) { return next(err); }
    survey.surveyID = updatedSurvey.surveyID || '';
    survey.profile.shortTitle = updatedSurvey.shortTitle || '';
    survey.profile.question = updatedSurvey.question || '';
     
    // Verify user again
    survey.verifyAuthor(req.user.id, function(err, isAuthor){
      if (err) { return next(err); }
      if (isAuthor) {
        // Verify custom surveyID is open, and then save survey + redirect
        Survey.findOne({surveyID: updatedSurvey.surveyID}, (err, existingSurvey) => {
          if (existingSurvey) {
                req.flash('errors', { msg: 'The special ID you have entered is already associated with an survey.' });
                return res.redirect('/surveyUpdate');
          }
          // Save survey
          survey.save((err) => {
            if (err) {
              if (err.code === 11000) {
                req.flash('errors', { msg: 'Duplicate options.' });
                return res.redirect('/surveyUpdate');
              }
              return next(err);
            }
            req.flash('success', { msg: 'Survey has been updated.' });
            res.redirect('/survey/update/' + survey._id);
          });
        });
      } else {
        req.flash('errors', { msg: 'You are not the author of this survey.' });
        res.redirect('/');
       }
    });
  });
};

/**
 * POST /survey/update/delete
 * Delete survey.
 */
exports.postDeleteSurvey = (req, res, next) => {
  if (!req.user) {
    return res.redirect('/');
  }
// Find survey
  Survey.findById(req.body.survey_id, (err, survey) => {
    if (err) { return next(err); }
    // Verify user 
    survey.verifyAuthor(req.user.id, function(err, isAuthor){
      if (err) { return next(err); }
      if (isAuthor) {
        Survey.remove({_id: req.body.survey_id}, (err) => {
          if (err) { return next(err); }
          req.logout();
          req.flash('info', { msg: 'Survey has been deleted.' });
          res.redirect('/');
        });
      } else {
        req.flash('errors', { msg: 'You are not the author of this survey.' });
        res.redirect('/');
       }
    });
  });
};
